// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Guest {
  id          BigInt    @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String    @unique
  phoneNumber String?
  address     String?
  bookings    Booking[]
}

model Room {
  id            BigInt         @id @default(autoincrement())
  roomNumber    String         @unique
  roomType      String
  pricePerNight Decimal        @db.Decimal(10, 2)
  isAvailable   Boolean        @default(true)
  bookings      Booking[]
  roomInventory RoomInventory?
  channelRates  ChannelRate[]
}

model Booking {
  id            BigInt                @id @default(autoincrement())
  guestId       BigInt
  roomId        BigInt
  checkInDate   DateTime              @db.Date
  checkOutDate  DateTime              @db.Date
  totalPrice    Decimal               @db.Decimal(10, 2)
  status        String
  guest         Guest                 @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room          Room                  @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payments      Payment[]
  modifications BookingModification[]
}

model Payment {
  id            BigInt   @id @default(autoincrement())
  bookingId     BigInt
  amount        Decimal  @db.Decimal(10, 2)
  paymentDate   DateTime @db.Date
  paymentMethod String
  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Role {
  id          BigInt           @id @default(autoincrement())
  roleName    String           @unique
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id             BigInt           @id @default(autoincrement())
  permissionName String           @unique
  roles          RolePermission[]
}

model User {
  id           BigInt  @id @default(autoincrement())
  username     String  @unique
  passwordHash String
  email        String  @unique
  roleId       BigInt?
  role         Role?   @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model RolePermission {
  roleId       BigInt
  permissionId BigInt
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([roleId, permissionId])
}

model RoomInventory {
  id                  BigInt    @id @default(autoincrement())
  roomId              BigInt    @unique
  maintenanceStatus   String
  lastMaintenanceDate DateTime? @db.Date
  room                Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Amenity {
  id          BigInt  @id @default(autoincrement())
  name        String  @unique
  description String?
  isAvailable Boolean @default(true)
}

model Channel {
  id           BigInt        @id @default(autoincrement())
  channelName  String        @unique
  contactInfo  String?
  channelRates ChannelRate[]
}

model ChannelRate {
  id        BigInt   @id @default(autoincrement())
  roomId    BigInt
  channelId BigInt
  rate      Decimal  @db.Decimal(10, 2)
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BookingSource {
  id         BigInt @id @default(autoincrement())
  sourceName String @unique
}

model BookingModification {
  id                  BigInt   @id @default(autoincrement())
  bookingId           BigInt
  modificationDate    DateTime @db.Date
  modificationDetails String
  booking             Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
