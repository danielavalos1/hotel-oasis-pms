// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guest {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String    @unique
  phoneNumber String
  address     String?
  bookings    Booking[]
}

model Room {
  id            Int            @id @default(autoincrement())
  roomNumber    String         @unique
  type          RoomType       @default(SENCILLA)
  capacity      Int            @default(2)
  description   String?
  amenities     String[]       @default([])
  pricePerNight Int
  isAvailable   Boolean        @default(true)
  bookingRooms  BookingRoom[] // Cambiado de bookings a bookingRooms
  roomInventory RoomInventory?
  channelRates  ChannelRate[]
}

enum RoomType {
  SENCILLA
  SENCILLA_ESPECIAL
  DOBLE
  DOBLE_ESPECIAL
  SUITE_A
  SUITE_B
}

model Booking {
  id             Int                   @id @default(autoincrement())
  guestId        Int
  checkInDate    DateTime              @db.Date
  checkOutDate   DateTime              @db.Date
  totalPrice     Int
  status         String
  numberOfGuests Int                   @default(1)
  guest          Guest                 @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingRooms   BookingRoom[] // Nueva relación a través de BookingRoom
  payments       Payment[]
  modifications  BookingModification[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  bookingId     Int
  amount        Int
  paymentDate   DateTime @db.Date
  paymentMethod String
  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum UserRole {
  ADMIN
  RECEPTIONIST
  HOUSEKEEPER
  SUPERADMIN
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  name         String
  passwordHash String
  email        String   @unique
  role         UserRole @default(RECEPTIONIST)
}

model RoomInventory {
  id                  Int       @id @default(autoincrement())
  roomId              Int       @unique
  maintenanceStatus   String
  lastMaintenanceDate DateTime? @db.Date
  room                Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Amenity {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isAvailable Boolean @default(true)
}

model Channel {
  id           Int           @id @default(autoincrement())
  channelName  String        @unique
  contactInfo  String?
  channelRates ChannelRate[]
}

model ChannelRate {
  id        Int      @id @default(autoincrement())
  roomId    Int
  channelId Int
  rate      Int
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BookingSource {
  id         Int    @id @default(autoincrement())
  sourceName String @unique
}

model BookingModification {
  id                  Int      @id @default(autoincrement())
  bookingId           Int
  modificationDate    DateTime @db.Date
  modificationDetails String
  booking             Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Nuevo modelo para manejar la relación muchos a muchos entre Booking y Room
model BookingRoom {
  id          Int     @id @default(autoincrement())
  bookingId   Int
  roomId      Int
  priceAtTime Int 
  booking     Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room        Room    @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([bookingId, roomId]) // Asegura que no haya duplicados
}
